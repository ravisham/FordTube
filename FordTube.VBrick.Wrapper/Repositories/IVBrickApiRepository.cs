using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using FordTube.VBrick.Wrapper.Enums;
using FordTube.VBrick.Wrapper.Models;

using OneMagnify.Data.Ford.FordTube.Entities;

namespace FordTube.VBrick.Wrapper.Repositories
{

    public interface IVBrickApiRepository
    {
        FranchiseType Franchise { get; set; }
        List<CategoryModel> GetFranchiseCategoriesAsync();
        Task SetConfigVBrickApi(bool                                          bypass = false);
        string GetMappedId(VbrickMappingsType                                 name);
        UploadVideoResponseModel UploadDealerVideo(UploadVideoModel           model);
        UploadVideoResponseModel UploadAdminVideo(UploadVideoModel            model);
        UploadVideoResponseModel UploadVideo(UploadVideoModel                 model, bool isActive = false);
        UploadVideoResponseModel UploadVideoRequest(UploadVideoModel          model);
        Task<bool> ReplaceVideo(string                                        id, ReplaceVideoModel model);
        Task<UploadVideoResponseModel> UploadVideoByUrl(UploadVideoByUrlModel model);
        bool UploadSupplementalFiles(string                                   id, AddSupplementalFilesModel model, List<byte[]> files);
        bool UploadTranscriptionFile(TranscriptFileModel                      model);
        bool UploadThumbnail(string                                           id, string fileName, byte[] data);
        Task<VideoStatusModel> GetVideoStatus(string                          id);
        Task VideoMigration(string                                            id, MigrationModel model);
        Dictionary<string, string> GetMappings();
        Task<bool> CheckPermissions(CheckPermissionsModel     model);
        Task<VideoDetailsModel> GetVideoDetails(string        id);
        Task<int> GetViewCountForPeriod(string videoId, DateTime startDate, DateTime endDate);
        Task<int> GetViewsSincePublished(string               videoId, DateTime publishDate);
        Task<VideoDetailsModel> GetVideoDetailsForEdit(string id);
        Task<FranchiseType> GetVideoFranchise(string          id);
        Task EditVideoExpirationDate(string                   id, UploadVideoModel model);
        Task ApproveVideoRequest(string                       id, bool             approve);
        Task InactivateVideo(string                           id);
        Task RejectVideoRequest(string                        id);
        Task DeleteVideoRequest(string                        id);
        Task ActivateVideo(string                             id);
        Task EditVideoDetails(EditVideoModel                  model, bool            videoFileReplaced);
        Task EditVideoRating(string                           id,    EditRatingModel model);
        Task DeleteVideo(string                               id);
        Task AddVideoComment(string                           id, AddCommentModel model);
        Task<string> AddUser(UserModel                        model);
        Task DeleteUser(string                                id);
        Task<UserModel> GetUser(string                        id);
        Task<UserModel> GetUserByUserName(string              userName);
        Task<RoleModel[]> GetRoles();
        Task<GetCategoriesModel> GetCategories();
        Task<GetCategoriesModel> GetFilteredCategories();
        Task<GetCategoriesModel> GetChildrenCategories(string id);
        Task<AddCategoryResponseModel> AddCategory(AddCategoryRequestModel model);
        Task DeleteCategory(string id);
        Task<VideosListModel> GetVideos();
        Task<VideoPlaybackUrlResponseModel> GetPlaybackUrl(string id);
        Task EditAccessControl(string id, AccessControlEntityModel[] model);
        Task<VideoSearchResponseModel> InactiveVideos(string scrollId);
        Task<VideoSearchResponseModel> GetAllVideoRequests(string scrollId);
        Task<VideoSearchResponseModel> VideosForApproval(string scrollId);
        Task<VideoSearchResponseModel> SearchVideo(VideoSearchRequestModel model);
        Task<VideoSearchResponseModel> MostRecentVideos();
        Task<VideoSearchResponseModel> SearchVideoByRating(List<string> videos);
        Task<VideoSearchResponseModel> SearchPrivateVideos(string scrollId);
        Task<byte[]> DownloadVideo(string id);       
        Task<Stream> DownloadFileStream(string url);
        Task<VideoViewStatusMode> GetViewStatusMode(string videoId, string userId);
        Task<CommentModel> GetVideoComments(string id);
        Task<VideoEmbeddingModel> GetVideoEmbedInfo(VideoEmbeddingQueryModel model);
        Task<int> GetVideosCount();
        Task<VideoReportModel[]> GetVideoReport(VideoReportQueryModel model);
        Task MakeVideoFeatured(MakeVideoFeaturedModel model);
        Task<GetCategoryModel[]> GetCategoriesByFranchise(FranchiseType franchise);
        Task<FranchiseType> GetFranchise(string[] categories);
        Task<UserGroupModel[]> GetRoleCategories();
        Task<UserGroupModel[]> GetMarketCategories();
        Task FlagVideo(string id);
        Task UnflagVideo(string id);
        Task<VideoSearchResponseModel> GetFlaggedVideos(string scrollId);
        Task ArchiveVideo(string id);
        Task UnarchiveVideo(string id);
        Task<VideoSearchResponseModel> GetArchivedVideos(string scrollId);
        Task<VideoSearchResponseModel> GetUserVideos(ManageVideoModel model);
        Task<VideoSearchResponseModel> GetExpiredVideos(string scrollId);
        Task<VideoSearchResponseModel> GetPendingVideos(string scrollId);
        Task<VideoSearchResponseModel> GetFeaturedVideos(FeaturedVideosRequestModel model);
        Task<AddCategoryResponseModel> AddFeaturedCategory(string name);
        Task<FeateredCategoriesModel[]> GetFeaturedCategories();
        Task<HomePageCategoryModel[][]> GetHomePageCategories();
        Task<VideoSearchResponseModel> GetTopVideos(string scrollId);
        Task<VideoSearchResponseItemModel[][]> GetTopFeaturedVideos(bool showAll);
        Task ManagePlaylist(string id, ManagePlaylistVideosModel model);
        Task DeletePlaylist(string id);
        Task ManageFeaturedList(ManagePlaylistVideosModel model);
        Task<string> AddPlaylist(AddPlaylistRequestModel model);
        Task<PlaylistDetailsModel> GetPlaylists();
        Task<string> GetRecordingStatus(string videoId);
        Task<string> StopRecording(RecordingModel model);
        Task<string> StartRecording(StartRecordingModel model);
        Task<ZoneDevicesModel> GetZoneDevices(string zoneId);
        Task EditZone(string zoneId, AddOrEditZoneModel model);
        Task DeleteZone(string zoneId);
        Task<string> AddZone(AddOrEditZoneModel model);
        Task<ZonesModel> GetZones();
        Task<GroupModel> SearchGroup(string groupId, string scrollId = null);
        Task EditGroup(string groupId, AddOrEditGroupModel model);
        Task DeleteGroup(string groupId);
        Task<string> AddGroup(AddOrEditGroupModel model);
        Task<SearchTeamModel[]> SearchTeam();
        Task EditTeam(string teamId, AddTeamModel model);
        Task DeleteTeam(string teamId);
        Task<string> AddTeam(AddTeamModel model);
        Task<TeamModel[]> GetTeams();
        Task<VideoFieldModel[]> GetVideoFields();
        Task<AccessEntitiesModel> QueryAccessEntities(string query, string type = "User");
        Task<AccessEntitiesModel> GetAccessEntities();
        Task<PresentationProfileModel[]> GetPresentationProfiles();
        Task DeleteDme(string deviceId);
        Task<string> AddDmeDevice(AddDmeModel model);
        Task<DmeDevicesModel> GetDmeDevices();
        Task<EventReportModel> GetEventReport(string                          eventId);
        Task EditEventAccess(string                                           eventId, EditEventAccessControlModel model);
        Task EditEvent(string                                                 eventId, EditEventModel              model);
        Task<EventDetailsModel> GetEvent(string                               eventId);
        Task CreateEvent(CreateEventModel                                     model);
        Task<EventSearchResponseModel> GetEvents(EventsQueryModel model);
        Task RejectVideo(string                                               videoId);
        Task<PendingApprovalModel[]> GetPendingVideos();
        Task ApproveVideo(string videoId);
        Task SendVideoForApproval(string videoId, string templateId);
        Task<ApprovalTemplateModel[]> GetApprovalTemplates();

    }
}
