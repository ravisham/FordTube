//
// Copyright 2017 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

@import "../variables";

/**
 * Applies the correct CSS rules to an element to give it the elevation specified by $z-value.
 * The $z-value must be between 0 and 24.
 * If $color has an alpha channel, it will be ignored and overridden. To increase the opacity of the shadow, use
 * $opacity-boost.
 */
@mixin elevation($z-value, $color: $elevation-baseline-color, $opacity-boost: 0) {
  @if type-of($z-value) != number or not unitless($z-value) {
    @error "$z-value must be a unitless number, but received '#{$z-value}'";
  }

  @if $z-value < 0 or $z-value > 24 {
    @error "$z-value must be between 0 and 24, but received '#{$z-value}'";
  }

  @if type-of($color) != color {
    @error "$color must be a valid color, but '#{$color}' is of type #{type-of($color)}";
  }

  $umbra-z-value: map-get($elevation-umbra-map, $z-value);
  $penumbra-z-value: map-get($elevation-penumbra-map, $z-value);
  $ambient-z-value: map-get($elevation-ambient-map, $z-value);

  $umbra-color: rgba($color, $elevation-umbra-opacity + $opacity-boost);
  $penumbra-color: rgba($color, $elevation-penumbra-opacity + $opacity-boost);
  $ambient-color: rgba($color, $elevation-ambient-opacity + $opacity-boost);

  box-shadow:
    #{"#{$umbra-z-value} #{$umbra-color}"},
    #{"#{$penumbra-z-value} #{$penumbra-color}"},
    #{$ambient-z-value} $ambient-color;
}

/**
 * Returns a string that can be used as the value for a `transition` property for elevation.
 * Calling this function directly is useful in situations where a component needs to transition
 * more than one property.
 *
 * ```scss
 * .foo {
 *   transition: elevation-transition-value(), opacity 100ms ease;
 *   will-change: $elevation-property, opacity;
 * }
 * ```
 */
@function elevation-transition-value(
  $duration: $elevation-transition-duration,
  $easing: $elevation-transition-timing-function) {
  @return #{$elevation-property} #{$duration} #{$easing};
}

@for $z-value from 0 through 24 {
  elevation--z#{$z-value} {
    @include elevation($z-value);
  }
}

.elevation-transition {
  transition: elevation-transition-value();
  will-change: elevation-property;
}
